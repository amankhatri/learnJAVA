/* Two Problems which we might encounter with multiple thread
 * 1) Data being cached
 * 2) Threads in deleting
 *we learn about volatile key word */
		/*The problem occurs when we start to think about how to terminate a thread properly in the cases like the one given below with while loop
		 * We can do that by using Thread Interruptions but here we will do this by shared data. To do this we will use a boolean variable */

class Processor extends Thread{
	private boolean running = true;
	@Override
	public void run(){
		/*The problem occurs when we start to think about how to terminate a thread properly in the cases like the one given below
		 * We can do that by using Thread Interruptions but here we will do this by shared data. */
		while(running){
			System.out.println("Hello");
			try {
				Thread.sleep(200);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}

public class Application {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Processor processor1 = new Processor();
		processor1.start();

	}

}
