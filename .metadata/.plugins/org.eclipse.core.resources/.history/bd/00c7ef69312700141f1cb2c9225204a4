class Frog {
	String name;
	int age;
	//setter method to set the name
	public void setName(String newName)
	{
		name = newName;
	}
	//setter method to set the age
	public void setAge(int newAge)
	{
		age = newAge;
	}
	public String getName(){
		return name;
	}
	public int getAge(){
		return age;
	}
}

public class Applicaton {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//now to set variables we would have to create an object for the class frog
		// and we would have to know the names of the variables in the class like this:
		Frog frog1 = new Frog();
		//Name and age are instance variables from class Frog and showing your the names is 
		//not a good idea so we use setters to set instance variables
		frog1.name = "Frog1";
		frog1.age = 10;
		System.out.println("Frog1.name: "+frog1.getName());
		System.out.println("Frog1.age: "+frog1.getAge());
		//however knowing the names of the variables is not nessacary because we can use 
		//methods to set the variables of a class, these methods are called setters for example
		// see the two setters in class frog.
		frog1.setName("Frog2");
		frog1.setAge(18);
		System.out.println("Frog Name: "+frog1.getName());
		System.out.println("Frog Age: "+frog1.getAge());
		//Using setters encapsulates(hides) the instance variables from the main program so this is
		//called Encapsulation
		/*To enforce Encapsulation you declare the variables of class Frog as private*/
	}

}
