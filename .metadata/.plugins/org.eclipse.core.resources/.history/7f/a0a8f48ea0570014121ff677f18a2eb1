import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;


public class Runner {
	private int count;
	/*I want to increment count to 20K, since both the thread will run separately. We can do this by using synchronized key word, however this can
	 * also be achieved by Reentrant lock. Always remember you have to unlock a thread as many times as you lock it. Ref1*/
	private Lock lock = new ReentrantLock();
	private void increment(){
		for(int i = 0; i<10000;i++){
			count++;
		}
	}
	public void firstThread() throws InterruptedException {
		/*Ref: Here I will lock count via increment method and unlock it . Increment method will not be used by any other thread unless I unlock it.  */
		lock.lock();
		increment();
		lock.unlock();
		
	}
	public void secondThread()throws InterruptedException{
		lock.lock();
		increment();
		lock.unlock();
	}
	public void finished(){
		System.out.println("Count is : "+count);
	}
}
