import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/*Allow threads to return values and to thow exceptions*/
public class Application {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ExecutorService executor = Executors.newCachedThreadPool();
		/*when I submit a task to executor it returns a Future object and it parameterized */
		Future<Integer> future = executor.submit(new Callable<Integer>(){
			@Override
			public Integer call() throws Exception {
				// TODO Auto-generated method stub
				// TODO Auto-generated method stub
				Random random = new Random();
				int duration = random.nextInt(4000);
				System.out.println("Starting...");
				try {
					Thread.sleep(duration);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println("Finished Task");
				
				return duration;
			}
			
		});
		executor.shutdown();
		try {
			System.out.println("Returned value from the thread is : " +future.get());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
